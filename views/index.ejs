<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title></title>
    <!-- Vuetify CSS -->
    <link href="https://cdn.jsdelivr.net/npm/vuetify@2.5.8/dist/vuetify.min.css" rel="stylesheet">
    <!-- Vue.js -->
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
    <!-- Vuetify JS -->
    <script src="https://cdn.jsdelivr.net/npm/vuetify@2.5.8/dist/vuetify.js"></script>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <div id="app">
        <v-app>
            <v-container>
                <h1>Open AI Voice Chat</h1>
                <v-btn @click="startTranscription" :disabled="isTranscribing">Start Listening</v-btn>
                <v-btn @click="stopTranscription" :disabled="!isTranscribing">Stop Listening</v-btn>
                <p>{{transcript}}</p>
                <pre>{{messages}}</pre>
            </v-container>
        </v-app>
    </div>

    <script>
        new Vue({
            el: '#app',
            vuetify: new Vuetify(),
            data: {
                socket:null,
                transcript: null,
                isTranscribing: false,
                mediaRecorder: null,
                audioChunks: [],
                messages: [],
                audioPlayer: new Audio(),
                isPlayingAudio: false,
                timeout: null,
                wait: 1
            },
            beforeUnmount() {
                if (this.socket) {
                    this.socket.disconnect();
                }
            },
            methods: {
                async runCompletion(userText) {
                    if (!userText) return;
                    this.messages = [...this.messages, {role: "user", content: userText}];
                    // Make POST request to backend
                    const response = await fetch('/chat_completion', {
                        method: 'POST',
                        headers: {
                        'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ messages: this.messages }),
                    });
                    const reader = response.body?.pipeThrough(new TextDecoderStream()).getReader();
                    if (!reader) return;
                    const assistantMessage = {role: "assistant", content: ""}
                    this.messages = [...this.messages, assistantMessage];
                    while (true) {
                        const { value, done } = await reader.read();
                        if (done) break;
                        let dataDone = false;
                        const arr = value.split('\n');
                        arr.forEach((data) => {
                            if (data.length === 0) return; // ignore empty message
                            if (data.startsWith(':')) return; // ignore sse comment message
                            if (data === 'data: [DONE]') {
                                dataDone = true;
                                return;
                            }
                            const json = JSON.parse(data.substring(6));
                            const content = json?.choices?.[0]?.delta?.content;
                            if (content) assistantMessage.content += content;
                        });
                        if (dataDone) break;
                    }
                    if (assistantMessage.content.length ===0) {
                        this.messages = this.messages.filter(i => i !== assistantMessage);
                    } else {
                        this.generateAudio(assistantMessage.content);
                    }
                },
                connectToSocketIo() {
                    if (!this.socket) {
                      this.socket = io();
              
                      this.socket.on('transcription', (transcription) => {
                        if (this.timeout) clearTimeout(this.timeout);
                        this.transcript = transcription;
                        this.timeout = setTimeout(
                            () => this.runCompletion(transcription), 
                            this.wait * 1000
                        );
                      });
              
                      this.socket.on('transcriptionError', (error) => {
                        console.error('Transcription Error:', error);
                      });
                    }
                },
                stopTranscription() {
                    if (this.mediaRecorder) {
                        this.mediaRecorder.stop();
                    }
                },
                async startTranscription() {
                    this.connectToSocketIo();
                    try {
                        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                        const recorderOptions = { mimeType: 'audio/webm' };
                        this.mediaRecorder = new MediaRecorder(stream , recorderOptions);
                        this.mediaRecorder.addEventListener('dataavailable', (event) => {
                            this.socket.emit('audioData', event.data);
                        });
                
                        this.mediaRecorder.start(100); // Emit audio data every 100ms
                        this.mediaRecorder.onstop = () => this.isTranscribing = false;
                        this.isTranscribing = true;
                        this.transcript = '';
                    } catch (error) {
                        console.error('Error accessing microphone:', error);
                    }
                },
                generateAudio(text) {
                  return new Promise((resolve, reject) => {
                    this.audioPlayer.src = '/audio_clip?text=' + text;
                    this.audioPlayer.onplay = () => {
                      this.isPlayingAudio = true;
                    };
                    this.audioPlayer.onpause = () => {
                      this.isPlayingAudio = false;
                      resolve();
                    };
                    this.audioPlayer.onended = () => {
                      this.isPlayingAudio = false;
                      resolve();
                    };
                    this.audioPlayer.onerror = (e) => {
                      this.isPlayingAudio = false;
                      reject(e);
                    }
                    this.audioPlayer.play();
                  })
                }
            }
        });
    </script>
</body>
</html>
